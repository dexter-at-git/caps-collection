//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace CapsCollection.Silverlight.ServiceAgents.Proxies.Geography {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContinentDto", Namespace="http://schemas.datacontract.org/2004/07/CapsCollection.Business.DTOs")]
    public partial class ContinentDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ContinentCodeField;
        
        private int ContinentIdField;
        
        private string ContinentNameField;
        
        private string EnglishContinentNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContinentCode {
            get {
                return this.ContinentCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContinentCodeField, value) != true)) {
                    this.ContinentCodeField = value;
                    this.RaisePropertyChanged("ContinentCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContinentId {
            get {
                return this.ContinentIdField;
            }
            set {
                if ((this.ContinentIdField.Equals(value) != true)) {
                    this.ContinentIdField = value;
                    this.RaisePropertyChanged("ContinentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContinentName {
            get {
                return this.ContinentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContinentNameField, value) != true)) {
                    this.ContinentNameField = value;
                    this.RaisePropertyChanged("ContinentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishContinentName {
            get {
                return this.EnglishContinentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishContinentNameField, value) != true)) {
                    this.EnglishContinentNameField = value;
                    this.RaisePropertyChanged("EnglishContinentName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryDto", Namespace="http://schemas.datacontract.org/2004/07/CapsCollection.Business.DTOs")]
    public partial class CountryDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string Alpha2Field;
        
        private string Alpha3Field;
        
        private CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto ContinentField;
        
        private int ContinentIdField;
        
        private int CountryIdField;
        
        private string EnglishCountryFullNameField;
        
        private string EnglishCountryNameField;
        
        private string ISOField;
        
        private string NationalCountryFullNameField;
        
        private string NationalCountryNameField;
        
        private string PreciseLocationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alpha2 {
            get {
                return this.Alpha2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Alpha2Field, value) != true)) {
                    this.Alpha2Field = value;
                    this.RaisePropertyChanged("Alpha2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alpha3 {
            get {
                return this.Alpha3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Alpha3Field, value) != true)) {
                    this.Alpha3Field = value;
                    this.RaisePropertyChanged("Alpha3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto Continent {
            get {
                return this.ContinentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContinentField, value) != true)) {
                    this.ContinentField = value;
                    this.RaisePropertyChanged("Continent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContinentId {
            get {
                return this.ContinentIdField;
            }
            set {
                if ((this.ContinentIdField.Equals(value) != true)) {
                    this.ContinentIdField = value;
                    this.RaisePropertyChanged("ContinentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishCountryFullName {
            get {
                return this.EnglishCountryFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishCountryFullNameField, value) != true)) {
                    this.EnglishCountryFullNameField = value;
                    this.RaisePropertyChanged("EnglishCountryFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishCountryName {
            get {
                return this.EnglishCountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishCountryNameField, value) != true)) {
                    this.EnglishCountryNameField = value;
                    this.RaisePropertyChanged("EnglishCountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ISO {
            get {
                return this.ISOField;
            }
            set {
                if ((object.ReferenceEquals(this.ISOField, value) != true)) {
                    this.ISOField = value;
                    this.RaisePropertyChanged("ISO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NationalCountryFullName {
            get {
                return this.NationalCountryFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NationalCountryFullNameField, value) != true)) {
                    this.NationalCountryFullNameField = value;
                    this.RaisePropertyChanged("NationalCountryFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NationalCountryName {
            get {
                return this.NationalCountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NationalCountryNameField, value) != true)) {
                    this.NationalCountryNameField = value;
                    this.RaisePropertyChanged("NationalCountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PreciseLocation {
            get {
                return this.PreciseLocationField;
            }
            set {
                if ((object.ReferenceEquals(this.PreciseLocationField, value) != true)) {
                    this.PreciseLocationField = value;
                    this.RaisePropertyChanged("PreciseLocation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageFileOperationDto", Namespace="http://schemas.datacontract.org/2004/07/CapsCollection.Business.DTOs")]
    public partial class ImageFileOperationDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ContainerField;
        
        private string FileNameField;
        
        private string FileNameTemplateField;
        
        private CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.FileOperation FileOperationField;
        
        private byte[] ImageBytesField;
        
        private string OldFileNameField;
        
        private string ParentContainerField;
        
        private string SourceFileFullNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Container {
            get {
                return this.ContainerField;
            }
            set {
                if ((object.ReferenceEquals(this.ContainerField, value) != true)) {
                    this.ContainerField = value;
                    this.RaisePropertyChanged("Container");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileNameTemplate {
            get {
                return this.FileNameTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameTemplateField, value) != true)) {
                    this.FileNameTemplateField = value;
                    this.RaisePropertyChanged("FileNameTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.FileOperation FileOperation {
            get {
                return this.FileOperationField;
            }
            set {
                if ((this.FileOperationField.Equals(value) != true)) {
                    this.FileOperationField = value;
                    this.RaisePropertyChanged("FileOperation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ImageBytes {
            get {
                return this.ImageBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageBytesField, value) != true)) {
                    this.ImageBytesField = value;
                    this.RaisePropertyChanged("ImageBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OldFileName {
            get {
                return this.OldFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OldFileNameField, value) != true)) {
                    this.OldFileNameField = value;
                    this.RaisePropertyChanged("OldFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentContainer {
            get {
                return this.ParentContainerField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentContainerField, value) != true)) {
                    this.ParentContainerField = value;
                    this.RaisePropertyChanged("ParentContainer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceFileFullName {
            get {
                return this.SourceFileFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceFileFullNameField, value) != true)) {
                    this.SourceFileFullNameField = value;
                    this.RaisePropertyChanged("SourceFileFullName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileOperation", Namespace="http://schemas.datacontract.org/2004/07/CapsCollection.Business.DTOs")]
    public enum FileOperation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Save = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Update = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegionDto", Namespace="http://schemas.datacontract.org/2004/07/CapsCollection.Business.DTOs")]
    public partial class RegionDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountryIdField;
        
        private string EnglishRegionNameField;
        
        private string NationalRegionNameField;
        
        private int RegionIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishRegionName {
            get {
                return this.EnglishRegionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishRegionNameField, value) != true)) {
                    this.EnglishRegionNameField = value;
                    this.RaisePropertyChanged("EnglishRegionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NationalRegionName {
            get {
                return this.NationalRegionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NationalRegionNameField, value) != true)) {
                    this.NationalRegionNameField = value;
                    this.RaisePropertyChanged("NationalRegionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RegionId {
            get {
                return this.RegionIdField;
            }
            set {
                if ((this.RegionIdField.Equals(value) != true)) {
                    this.RegionIdField = value;
                    this.RaisePropertyChanged("RegionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityDto", Namespace="http://schemas.datacontract.org/2004/07/CapsCollection.Business.DTOs")]
    public partial class CityDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CityIdField;
        
        private string EnglishCityNameField;
        
        private string NationalCityNameField;
        
        private int RegionIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityId {
            get {
                return this.CityIdField;
            }
            set {
                if ((this.CityIdField.Equals(value) != true)) {
                    this.CityIdField = value;
                    this.RaisePropertyChanged("CityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishCityName {
            get {
                return this.EnglishCityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishCityNameField, value) != true)) {
                    this.EnglishCityNameField = value;
                    this.RaisePropertyChanged("EnglishCityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NationalCityName {
            get {
                return this.NationalCityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NationalCityNameField, value) != true)) {
                    this.NationalCityNameField = value;
                    this.RaisePropertyChanged("NationalCityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RegionId {
            get {
                return this.RegionIdField;
            }
            set {
                if ((this.RegionIdField.Equals(value) != true)) {
                    this.RegionIdField = value;
                    this.RaisePropertyChanged("RegionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BeerCountryDto", Namespace="http://schemas.datacontract.org/2004/07/CapsCollection.Business.DTOs")]
    public partial class BeerCountryDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string Alpha3Field;
        
        private int BeerCountField;
        
        private CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto ContinentField;
        
        private int ContinentIdField;
        
        private int CountryIdField;
        
        private string EnglishCountryFullNameField;
        
        private string EnglishCountryNameField;
        
        private string NationalCountryFullNameField;
        
        private string NationalCountryNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alpha3 {
            get {
                return this.Alpha3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Alpha3Field, value) != true)) {
                    this.Alpha3Field = value;
                    this.RaisePropertyChanged("Alpha3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BeerCount {
            get {
                return this.BeerCountField;
            }
            set {
                if ((this.BeerCountField.Equals(value) != true)) {
                    this.BeerCountField = value;
                    this.RaisePropertyChanged("BeerCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto Continent {
            get {
                return this.ContinentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContinentField, value) != true)) {
                    this.ContinentField = value;
                    this.RaisePropertyChanged("Continent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContinentId {
            get {
                return this.ContinentIdField;
            }
            set {
                if ((this.ContinentIdField.Equals(value) != true)) {
                    this.ContinentIdField = value;
                    this.RaisePropertyChanged("ContinentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishCountryFullName {
            get {
                return this.EnglishCountryFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishCountryFullNameField, value) != true)) {
                    this.EnglishCountryFullNameField = value;
                    this.RaisePropertyChanged("EnglishCountryFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnglishCountryName {
            get {
                return this.EnglishCountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EnglishCountryNameField, value) != true)) {
                    this.EnglishCountryNameField = value;
                    this.RaisePropertyChanged("EnglishCountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NationalCountryFullName {
            get {
                return this.NationalCountryFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NationalCountryFullNameField, value) != true)) {
                    this.NationalCountryFullNameField = value;
                    this.RaisePropertyChanged("NationalCountryFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NationalCountryName {
            get {
                return this.NationalCountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NationalCountryNameField, value) != true)) {
                    this.NationalCountryNameField = value;
                    this.RaisePropertyChanged("NationalCountryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxies.Geography.IGeographyService")]
    public interface IGeographyService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetContinents", ReplyAction="http://tempuri.org/IGeographyService/GetContinentsResponse")]
        System.IAsyncResult BeginGetContinents(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> EndGetContinents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetAllCountries", ReplyAction="http://tempuri.org/IGeographyService/GetAllCountriesResponse")]
        System.IAsyncResult BeginGetAllCountries(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> EndGetAllCountries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetCountriesByContinent", ReplyAction="http://tempuri.org/IGeographyService/GetCountriesByContinentResponse")]
        System.IAsyncResult BeginGetCountriesByContinent(int continentId, bool includeFlags, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> EndGetCountriesByContinent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetCountry", ReplyAction="http://tempuri.org/IGeographyService/GetCountryResponse")]
        System.IAsyncResult BeginGetCountry(int countryId, System.AsyncCallback callback, object asyncState);
        
        CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto EndGetCountry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/UpdateCountry", ReplyAction="http://tempuri.org/IGeographyService/UpdateCountryResponse")]
        System.IAsyncResult BeginUpdateCountry(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ImageFileOperationDto> flags, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCountry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/DeleteCountry", ReplyAction="http://tempuri.org/IGeographyService/DeleteCountryResponse")]
        System.IAsyncResult BeginDeleteCountry(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCountry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetAllRegions", ReplyAction="http://tempuri.org/IGeographyService/GetAllRegionsResponse")]
        System.IAsyncResult BeginGetAllRegions(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> EndGetAllRegions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetRegionsByCountry", ReplyAction="http://tempuri.org/IGeographyService/GetRegionsByCountryResponse")]
        System.IAsyncResult BeginGetRegionsByCountry(int countryId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> EndGetRegionsByCountry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetRegion", ReplyAction="http://tempuri.org/IGeographyService/GetRegionResponse")]
        System.IAsyncResult BeginGetRegion(int regionId, System.AsyncCallback callback, object asyncState);
        
        CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto EndGetRegion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/UpdateRegion", ReplyAction="http://tempuri.org/IGeographyService/UpdateRegionResponse")]
        System.IAsyncResult BeginUpdateRegion(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateRegion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/DeleteRegion", ReplyAction="http://tempuri.org/IGeographyService/DeleteRegionResponse")]
        System.IAsyncResult BeginDeleteRegion(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteRegion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetAlCities", ReplyAction="http://tempuri.org/IGeographyService/GetAlCitiesResponse")]
        System.IAsyncResult BeginGetAlCities(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> EndGetAlCities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetCitiesByRegion", ReplyAction="http://tempuri.org/IGeographyService/GetCitiesByRegionResponse")]
        System.IAsyncResult BeginGetCitiesByRegion(int regionId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> EndGetCitiesByRegion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetCity", ReplyAction="http://tempuri.org/IGeographyService/GetCityResponse")]
        System.IAsyncResult BeginGetCity(int cityId, System.AsyncCallback callback, object asyncState);
        
        CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto EndGetCity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/UpdateCity", ReplyAction="http://tempuri.org/IGeographyService/UpdateCityResponse")]
        System.IAsyncResult BeginUpdateCity(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/DeleteCity", ReplyAction="http://tempuri.org/IGeographyService/DeleteCityResponse")]
        System.IAsyncResult BeginDeleteCity(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetBeerCountries", ReplyAction="http://tempuri.org/IGeographyService/GetBeerCountriesResponse")]
        System.IAsyncResult BeginGetBeerCountries(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.BeerCountryDto> EndGetBeerCountries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetContinentsWithBreweries", ReplyAction="http://tempuri.org/IGeographyService/GetContinentsWithBreweriesResponse")]
        System.IAsyncResult BeginGetContinentsWithBreweries(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> EndGetContinentsWithBreweries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetContinentCountriesWithBreweries", ReplyAction="http://tempuri.org/IGeographyService/GetContinentCountriesWithBreweriesResponse")]
        System.IAsyncResult BeginGetContinentCountriesWithBreweries(int continentId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> EndGetContinentCountriesWithBreweries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGeographyService/GetCountriesWithBreweries", ReplyAction="http://tempuri.org/IGeographyService/GetCountriesWithBreweriesResponse")]
        System.IAsyncResult BeginGetCountriesWithBreweries(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> EndGetCountriesWithBreweries(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeographyServiceChannel : CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContinentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContinentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountriesByContinentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountriesByContinentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllRegionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllRegionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRegionsByCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRegionsByCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCitiesByRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCitiesByRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBeerCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBeerCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.BeerCountryDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.BeerCountryDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContinentsWithBreweriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContinentsWithBreweriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContinentCountriesWithBreweriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContinentCountriesWithBreweriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountriesWithBreweriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountriesWithBreweriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeographyServiceClient : System.ServiceModel.ClientBase<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService>, CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService {
        
        private BeginOperationDelegate onBeginGetContinentsDelegate;
        
        private EndOperationDelegate onEndGetContinentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetContinentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCountriesDelegate;
        
        private EndOperationDelegate onEndGetAllCountriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCountriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountriesByContinentDelegate;
        
        private EndOperationDelegate onEndGetCountriesByContinentDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountriesByContinentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountryDelegate;
        
        private EndOperationDelegate onEndGetCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCountryDelegate;
        
        private EndOperationDelegate onEndUpdateCountryDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCountryDelegate;
        
        private EndOperationDelegate onEndDeleteCountryDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllRegionsDelegate;
        
        private EndOperationDelegate onEndGetAllRegionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllRegionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRegionsByCountryDelegate;
        
        private EndOperationDelegate onEndGetRegionsByCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetRegionsByCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRegionDelegate;
        
        private EndOperationDelegate onEndGetRegionDelegate;
        
        private System.Threading.SendOrPostCallback onGetRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateRegionDelegate;
        
        private EndOperationDelegate onEndUpdateRegionDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRegionDelegate;
        
        private EndOperationDelegate onEndDeleteRegionDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlCitiesDelegate;
        
        private EndOperationDelegate onEndGetAlCitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlCitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCitiesByRegionDelegate;
        
        private EndOperationDelegate onEndGetCitiesByRegionDelegate;
        
        private System.Threading.SendOrPostCallback onGetCitiesByRegionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCityDelegate;
        
        private EndOperationDelegate onEndGetCityDelegate;
        
        private System.Threading.SendOrPostCallback onGetCityCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCityDelegate;
        
        private EndOperationDelegate onEndUpdateCityDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCityCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCityDelegate;
        
        private EndOperationDelegate onEndDeleteCityDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCityCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBeerCountriesDelegate;
        
        private EndOperationDelegate onEndGetBeerCountriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetBeerCountriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContinentsWithBreweriesDelegate;
        
        private EndOperationDelegate onEndGetContinentsWithBreweriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetContinentsWithBreweriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContinentCountriesWithBreweriesDelegate;
        
        private EndOperationDelegate onEndGetContinentCountriesWithBreweriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetContinentCountriesWithBreweriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountriesWithBreweriesDelegate;
        
        private EndOperationDelegate onEndGetCountriesWithBreweriesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountriesWithBreweriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GeographyServiceClient() {
        }
        
        public GeographyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeographyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeographyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeographyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetContinentsCompletedEventArgs> GetContinentsCompleted;
        
        public event System.EventHandler<GetAllCountriesCompletedEventArgs> GetAllCountriesCompleted;
        
        public event System.EventHandler<GetCountriesByContinentCompletedEventArgs> GetCountriesByContinentCompleted;
        
        public event System.EventHandler<GetCountryCompletedEventArgs> GetCountryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCountryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCountryCompleted;
        
        public event System.EventHandler<GetAllRegionsCompletedEventArgs> GetAllRegionsCompleted;
        
        public event System.EventHandler<GetRegionsByCountryCompletedEventArgs> GetRegionsByCountryCompleted;
        
        public event System.EventHandler<GetRegionCompletedEventArgs> GetRegionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateRegionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteRegionCompleted;
        
        public event System.EventHandler<GetAlCitiesCompletedEventArgs> GetAlCitiesCompleted;
        
        public event System.EventHandler<GetCitiesByRegionCompletedEventArgs> GetCitiesByRegionCompleted;
        
        public event System.EventHandler<GetCityCompletedEventArgs> GetCityCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCityCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCityCompleted;
        
        public event System.EventHandler<GetBeerCountriesCompletedEventArgs> GetBeerCountriesCompleted;
        
        public event System.EventHandler<GetContinentsWithBreweriesCompletedEventArgs> GetContinentsWithBreweriesCompleted;
        
        public event System.EventHandler<GetContinentCountriesWithBreweriesCompletedEventArgs> GetContinentCountriesWithBreweriesCompleted;
        
        public event System.EventHandler<GetCountriesWithBreweriesCompletedEventArgs> GetCountriesWithBreweriesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetContinents(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContinents(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetContinents(System.IAsyncResult result) {
            return base.Channel.EndGetContinents(result);
        }
        
        private System.IAsyncResult OnBeginGetContinents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetContinents(callback, asyncState);
        }
        
        private object[] OnEndGetContinents(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetContinents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContinentsCompleted(object state) {
            if ((this.GetContinentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContinentsCompleted(this, new GetContinentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContinentsAsync() {
            this.GetContinentsAsync(null);
        }
        
        public void GetContinentsAsync(object userState) {
            if ((this.onBeginGetContinentsDelegate == null)) {
                this.onBeginGetContinentsDelegate = new BeginOperationDelegate(this.OnBeginGetContinents);
            }
            if ((this.onEndGetContinentsDelegate == null)) {
                this.onEndGetContinentsDelegate = new EndOperationDelegate(this.OnEndGetContinents);
            }
            if ((this.onGetContinentsCompletedDelegate == null)) {
                this.onGetContinentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContinentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetContinentsDelegate, null, this.onEndGetContinentsDelegate, this.onGetContinentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetAllCountries(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCountries(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetAllCountries(System.IAsyncResult result) {
            return base.Channel.EndGetAllCountries(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCountries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetAllCountries(callback, asyncState);
        }
        
        private object[] OnEndGetAllCountries(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetAllCountries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCountriesCompleted(object state) {
            if ((this.GetAllCountriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCountriesCompleted(this, new GetAllCountriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCountriesAsync() {
            this.GetAllCountriesAsync(null);
        }
        
        public void GetAllCountriesAsync(object userState) {
            if ((this.onBeginGetAllCountriesDelegate == null)) {
                this.onBeginGetAllCountriesDelegate = new BeginOperationDelegate(this.OnBeginGetAllCountries);
            }
            if ((this.onEndGetAllCountriesDelegate == null)) {
                this.onEndGetAllCountriesDelegate = new EndOperationDelegate(this.OnEndGetAllCountries);
            }
            if ((this.onGetAllCountriesCompletedDelegate == null)) {
                this.onGetAllCountriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCountriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCountriesDelegate, null, this.onEndGetAllCountriesDelegate, this.onGetAllCountriesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetCountriesByContinent(int continentId, bool includeFlags, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountriesByContinent(continentId, includeFlags, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetCountriesByContinent(System.IAsyncResult result) {
            return base.Channel.EndGetCountriesByContinent(result);
        }
        
        private System.IAsyncResult OnBeginGetCountriesByContinent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int continentId = ((int)(inValues[0]));
            bool includeFlags = ((bool)(inValues[1]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetCountriesByContinent(continentId, includeFlags, callback, asyncState);
        }
        
        private object[] OnEndGetCountriesByContinent(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetCountriesByContinent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountriesByContinentCompleted(object state) {
            if ((this.GetCountriesByContinentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountriesByContinentCompleted(this, new GetCountriesByContinentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountriesByContinentAsync(int continentId, bool includeFlags) {
            this.GetCountriesByContinentAsync(continentId, includeFlags, null);
        }
        
        public void GetCountriesByContinentAsync(int continentId, bool includeFlags, object userState) {
            if ((this.onBeginGetCountriesByContinentDelegate == null)) {
                this.onBeginGetCountriesByContinentDelegate = new BeginOperationDelegate(this.OnBeginGetCountriesByContinent);
            }
            if ((this.onEndGetCountriesByContinentDelegate == null)) {
                this.onEndGetCountriesByContinentDelegate = new EndOperationDelegate(this.OnEndGetCountriesByContinent);
            }
            if ((this.onGetCountriesByContinentCompletedDelegate == null)) {
                this.onGetCountriesByContinentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountriesByContinentCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountriesByContinentDelegate, new object[] {
                        continentId,
                        includeFlags}, this.onEndGetCountriesByContinentDelegate, this.onGetCountriesByContinentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetCountry(int countryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountry(countryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetCountry(System.IAsyncResult result) {
            return base.Channel.EndGetCountry(result);
        }
        
        private System.IAsyncResult OnBeginGetCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int countryId = ((int)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetCountry(countryId, callback, asyncState);
        }
        
        private object[] OnEndGetCountry(System.IAsyncResult result) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountryCompleted(object state) {
            if ((this.GetCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountryCompleted(this, new GetCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountryAsync(int countryId) {
            this.GetCountryAsync(countryId, null);
        }
        
        public void GetCountryAsync(int countryId, object userState) {
            if ((this.onBeginGetCountryDelegate == null)) {
                this.onBeginGetCountryDelegate = new BeginOperationDelegate(this.OnBeginGetCountry);
            }
            if ((this.onEndGetCountryDelegate == null)) {
                this.onEndGetCountryDelegate = new EndOperationDelegate(this.OnEndGetCountry);
            }
            if ((this.onGetCountryCompletedDelegate == null)) {
                this.onGetCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountryDelegate, new object[] {
                        countryId}, this.onEndGetCountryDelegate, this.onGetCountryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginUpdateCountry(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ImageFileOperationDto> flags, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCountry(country, flags, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndUpdateCountry(System.IAsyncResult result) {
            base.Channel.EndUpdateCountry(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ImageFileOperationDto> flags = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ImageFileOperationDto>)(inValues[1]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginUpdateCountry(country, flags, callback, asyncState);
        }
        
        private object[] OnEndUpdateCountry(System.IAsyncResult result) {
            ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndUpdateCountry(result);
            return null;
        }
        
        private void OnUpdateCountryCompleted(object state) {
            if ((this.UpdateCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCountryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCountryAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ImageFileOperationDto> flags) {
            this.UpdateCountryAsync(country, flags, null);
        }
        
        public void UpdateCountryAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ImageFileOperationDto> flags, object userState) {
            if ((this.onBeginUpdateCountryDelegate == null)) {
                this.onBeginUpdateCountryDelegate = new BeginOperationDelegate(this.OnBeginUpdateCountry);
            }
            if ((this.onEndUpdateCountryDelegate == null)) {
                this.onEndUpdateCountryDelegate = new EndOperationDelegate(this.OnEndUpdateCountry);
            }
            if ((this.onUpdateCountryCompletedDelegate == null)) {
                this.onUpdateCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCountryCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCountryDelegate, new object[] {
                        country,
                        flags}, this.onEndUpdateCountryDelegate, this.onUpdateCountryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginDeleteCountry(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCountry(country, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndDeleteCountry(System.IAsyncResult result) {
            base.Channel.EndDeleteCountry(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginDeleteCountry(country, callback, asyncState);
        }
        
        private object[] OnEndDeleteCountry(System.IAsyncResult result) {
            ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndDeleteCountry(result);
            return null;
        }
        
        private void OnDeleteCountryCompleted(object state) {
            if ((this.DeleteCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCountryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCountryAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country) {
            this.DeleteCountryAsync(country, null);
        }
        
        public void DeleteCountryAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, object userState) {
            if ((this.onBeginDeleteCountryDelegate == null)) {
                this.onBeginDeleteCountryDelegate = new BeginOperationDelegate(this.OnBeginDeleteCountry);
            }
            if ((this.onEndDeleteCountryDelegate == null)) {
                this.onEndDeleteCountryDelegate = new EndOperationDelegate(this.OnEndDeleteCountry);
            }
            if ((this.onDeleteCountryCompletedDelegate == null)) {
                this.onDeleteCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCountryCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCountryDelegate, new object[] {
                        country}, this.onEndDeleteCountryDelegate, this.onDeleteCountryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetAllRegions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllRegions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetAllRegions(System.IAsyncResult result) {
            return base.Channel.EndGetAllRegions(result);
        }
        
        private System.IAsyncResult OnBeginGetAllRegions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetAllRegions(callback, asyncState);
        }
        
        private object[] OnEndGetAllRegions(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetAllRegions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllRegionsCompleted(object state) {
            if ((this.GetAllRegionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllRegionsCompleted(this, new GetAllRegionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllRegionsAsync() {
            this.GetAllRegionsAsync(null);
        }
        
        public void GetAllRegionsAsync(object userState) {
            if ((this.onBeginGetAllRegionsDelegate == null)) {
                this.onBeginGetAllRegionsDelegate = new BeginOperationDelegate(this.OnBeginGetAllRegions);
            }
            if ((this.onEndGetAllRegionsDelegate == null)) {
                this.onEndGetAllRegionsDelegate = new EndOperationDelegate(this.OnEndGetAllRegions);
            }
            if ((this.onGetAllRegionsCompletedDelegate == null)) {
                this.onGetAllRegionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllRegionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllRegionsDelegate, null, this.onEndGetAllRegionsDelegate, this.onGetAllRegionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetRegionsByCountry(int countryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRegionsByCountry(countryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetRegionsByCountry(System.IAsyncResult result) {
            return base.Channel.EndGetRegionsByCountry(result);
        }
        
        private System.IAsyncResult OnBeginGetRegionsByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int countryId = ((int)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetRegionsByCountry(countryId, callback, asyncState);
        }
        
        private object[] OnEndGetRegionsByCountry(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetRegionsByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRegionsByCountryCompleted(object state) {
            if ((this.GetRegionsByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRegionsByCountryCompleted(this, new GetRegionsByCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRegionsByCountryAsync(int countryId) {
            this.GetRegionsByCountryAsync(countryId, null);
        }
        
        public void GetRegionsByCountryAsync(int countryId, object userState) {
            if ((this.onBeginGetRegionsByCountryDelegate == null)) {
                this.onBeginGetRegionsByCountryDelegate = new BeginOperationDelegate(this.OnBeginGetRegionsByCountry);
            }
            if ((this.onEndGetRegionsByCountryDelegate == null)) {
                this.onEndGetRegionsByCountryDelegate = new EndOperationDelegate(this.OnEndGetRegionsByCountry);
            }
            if ((this.onGetRegionsByCountryCompletedDelegate == null)) {
                this.onGetRegionsByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRegionsByCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetRegionsByCountryDelegate, new object[] {
                        countryId}, this.onEndGetRegionsByCountryDelegate, this.onGetRegionsByCountryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetRegion(int regionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRegion(regionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetRegion(System.IAsyncResult result) {
            return base.Channel.EndGetRegion(result);
        }
        
        private System.IAsyncResult OnBeginGetRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int regionId = ((int)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetRegion(regionId, callback, asyncState);
        }
        
        private object[] OnEndGetRegion(System.IAsyncResult result) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetRegion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRegionCompleted(object state) {
            if ((this.GetRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRegionCompleted(this, new GetRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRegionAsync(int regionId) {
            this.GetRegionAsync(regionId, null);
        }
        
        public void GetRegionAsync(int regionId, object userState) {
            if ((this.onBeginGetRegionDelegate == null)) {
                this.onBeginGetRegionDelegate = new BeginOperationDelegate(this.OnBeginGetRegion);
            }
            if ((this.onEndGetRegionDelegate == null)) {
                this.onEndGetRegionDelegate = new EndOperationDelegate(this.OnEndGetRegion);
            }
            if ((this.onGetRegionCompletedDelegate == null)) {
                this.onGetRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRegionCompleted);
            }
            base.InvokeAsync(this.onBeginGetRegionDelegate, new object[] {
                        regionId}, this.onEndGetRegionDelegate, this.onGetRegionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginUpdateRegion(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateRegion(region, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndUpdateRegion(System.IAsyncResult result) {
            base.Channel.EndUpdateRegion(result);
        }
        
        private System.IAsyncResult OnBeginUpdateRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginUpdateRegion(region, callback, asyncState);
        }
        
        private object[] OnEndUpdateRegion(System.IAsyncResult result) {
            ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndUpdateRegion(result);
            return null;
        }
        
        private void OnUpdateRegionCompleted(object state) {
            if ((this.UpdateRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateRegionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateRegionAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region) {
            this.UpdateRegionAsync(region, null);
        }
        
        public void UpdateRegionAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region, object userState) {
            if ((this.onBeginUpdateRegionDelegate == null)) {
                this.onBeginUpdateRegionDelegate = new BeginOperationDelegate(this.OnBeginUpdateRegion);
            }
            if ((this.onEndUpdateRegionDelegate == null)) {
                this.onEndUpdateRegionDelegate = new EndOperationDelegate(this.OnEndUpdateRegion);
            }
            if ((this.onUpdateRegionCompletedDelegate == null)) {
                this.onUpdateRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateRegionCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateRegionDelegate, new object[] {
                        region}, this.onEndUpdateRegionDelegate, this.onUpdateRegionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginDeleteRegion(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRegion(region, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndDeleteRegion(System.IAsyncResult result) {
            base.Channel.EndDeleteRegion(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginDeleteRegion(region, callback, asyncState);
        }
        
        private object[] OnEndDeleteRegion(System.IAsyncResult result) {
            ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndDeleteRegion(result);
            return null;
        }
        
        private void OnDeleteRegionCompleted(object state) {
            if ((this.DeleteRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRegionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRegionAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region) {
            this.DeleteRegionAsync(region, null);
        }
        
        public void DeleteRegionAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region, object userState) {
            if ((this.onBeginDeleteRegionDelegate == null)) {
                this.onBeginDeleteRegionDelegate = new BeginOperationDelegate(this.OnBeginDeleteRegion);
            }
            if ((this.onEndDeleteRegionDelegate == null)) {
                this.onEndDeleteRegionDelegate = new EndOperationDelegate(this.OnEndDeleteRegion);
            }
            if ((this.onDeleteRegionCompletedDelegate == null)) {
                this.onDeleteRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRegionCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRegionDelegate, new object[] {
                        region}, this.onEndDeleteRegionDelegate, this.onDeleteRegionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetAlCities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlCities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetAlCities(System.IAsyncResult result) {
            return base.Channel.EndGetAlCities(result);
        }
        
        private System.IAsyncResult OnBeginGetAlCities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetAlCities(callback, asyncState);
        }
        
        private object[] OnEndGetAlCities(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetAlCities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlCitiesCompleted(object state) {
            if ((this.GetAlCitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlCitiesCompleted(this, new GetAlCitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlCitiesAsync() {
            this.GetAlCitiesAsync(null);
        }
        
        public void GetAlCitiesAsync(object userState) {
            if ((this.onBeginGetAlCitiesDelegate == null)) {
                this.onBeginGetAlCitiesDelegate = new BeginOperationDelegate(this.OnBeginGetAlCities);
            }
            if ((this.onEndGetAlCitiesDelegate == null)) {
                this.onEndGetAlCitiesDelegate = new EndOperationDelegate(this.OnEndGetAlCities);
            }
            if ((this.onGetAlCitiesCompletedDelegate == null)) {
                this.onGetAlCitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlCitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlCitiesDelegate, null, this.onEndGetAlCitiesDelegate, this.onGetAlCitiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetCitiesByRegion(int regionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCitiesByRegion(regionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetCitiesByRegion(System.IAsyncResult result) {
            return base.Channel.EndGetCitiesByRegion(result);
        }
        
        private System.IAsyncResult OnBeginGetCitiesByRegion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int regionId = ((int)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetCitiesByRegion(regionId, callback, asyncState);
        }
        
        private object[] OnEndGetCitiesByRegion(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetCitiesByRegion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCitiesByRegionCompleted(object state) {
            if ((this.GetCitiesByRegionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCitiesByRegionCompleted(this, new GetCitiesByRegionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCitiesByRegionAsync(int regionId) {
            this.GetCitiesByRegionAsync(regionId, null);
        }
        
        public void GetCitiesByRegionAsync(int regionId, object userState) {
            if ((this.onBeginGetCitiesByRegionDelegate == null)) {
                this.onBeginGetCitiesByRegionDelegate = new BeginOperationDelegate(this.OnBeginGetCitiesByRegion);
            }
            if ((this.onEndGetCitiesByRegionDelegate == null)) {
                this.onEndGetCitiesByRegionDelegate = new EndOperationDelegate(this.OnEndGetCitiesByRegion);
            }
            if ((this.onGetCitiesByRegionCompletedDelegate == null)) {
                this.onGetCitiesByRegionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCitiesByRegionCompleted);
            }
            base.InvokeAsync(this.onBeginGetCitiesByRegionDelegate, new object[] {
                        regionId}, this.onEndGetCitiesByRegionDelegate, this.onGetCitiesByRegionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetCity(int cityId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCity(cityId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetCity(System.IAsyncResult result) {
            return base.Channel.EndGetCity(result);
        }
        
        private System.IAsyncResult OnBeginGetCity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cityId = ((int)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetCity(cityId, callback, asyncState);
        }
        
        private object[] OnEndGetCity(System.IAsyncResult result) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetCity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCityCompleted(object state) {
            if ((this.GetCityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCityCompleted(this, new GetCityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCityAsync(int cityId) {
            this.GetCityAsync(cityId, null);
        }
        
        public void GetCityAsync(int cityId, object userState) {
            if ((this.onBeginGetCityDelegate == null)) {
                this.onBeginGetCityDelegate = new BeginOperationDelegate(this.OnBeginGetCity);
            }
            if ((this.onEndGetCityDelegate == null)) {
                this.onEndGetCityDelegate = new EndOperationDelegate(this.OnEndGetCity);
            }
            if ((this.onGetCityCompletedDelegate == null)) {
                this.onGetCityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCityCompleted);
            }
            base.InvokeAsync(this.onBeginGetCityDelegate, new object[] {
                        cityId}, this.onEndGetCityDelegate, this.onGetCityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginUpdateCity(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCity(city, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndUpdateCity(System.IAsyncResult result) {
            base.Channel.EndUpdateCity(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginUpdateCity(city, callback, asyncState);
        }
        
        private object[] OnEndUpdateCity(System.IAsyncResult result) {
            ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndUpdateCity(result);
            return null;
        }
        
        private void OnUpdateCityCompleted(object state) {
            if ((this.UpdateCityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCityAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city) {
            this.UpdateCityAsync(city, null);
        }
        
        public void UpdateCityAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city, object userState) {
            if ((this.onBeginUpdateCityDelegate == null)) {
                this.onBeginUpdateCityDelegate = new BeginOperationDelegate(this.OnBeginUpdateCity);
            }
            if ((this.onEndUpdateCityDelegate == null)) {
                this.onEndUpdateCityDelegate = new EndOperationDelegate(this.OnEndUpdateCity);
            }
            if ((this.onUpdateCityCompletedDelegate == null)) {
                this.onUpdateCityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCityCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCityDelegate, new object[] {
                        city}, this.onEndUpdateCityDelegate, this.onUpdateCityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginDeleteCity(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCity(city, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndDeleteCity(System.IAsyncResult result) {
            base.Channel.EndDeleteCity(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginDeleteCity(city, callback, asyncState);
        }
        
        private object[] OnEndDeleteCity(System.IAsyncResult result) {
            ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndDeleteCity(result);
            return null;
        }
        
        private void OnDeleteCityCompleted(object state) {
            if ((this.DeleteCityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCityAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city) {
            this.DeleteCityAsync(city, null);
        }
        
        public void DeleteCityAsync(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city, object userState) {
            if ((this.onBeginDeleteCityDelegate == null)) {
                this.onBeginDeleteCityDelegate = new BeginOperationDelegate(this.OnBeginDeleteCity);
            }
            if ((this.onEndDeleteCityDelegate == null)) {
                this.onEndDeleteCityDelegate = new EndOperationDelegate(this.OnEndDeleteCity);
            }
            if ((this.onDeleteCityCompletedDelegate == null)) {
                this.onDeleteCityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCityCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCityDelegate, new object[] {
                        city}, this.onEndDeleteCityDelegate, this.onDeleteCityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetBeerCountries(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBeerCountries(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.BeerCountryDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetBeerCountries(System.IAsyncResult result) {
            return base.Channel.EndGetBeerCountries(result);
        }
        
        private System.IAsyncResult OnBeginGetBeerCountries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetBeerCountries(callback, asyncState);
        }
        
        private object[] OnEndGetBeerCountries(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.BeerCountryDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetBeerCountries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBeerCountriesCompleted(object state) {
            if ((this.GetBeerCountriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBeerCountriesCompleted(this, new GetBeerCountriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBeerCountriesAsync() {
            this.GetBeerCountriesAsync(null);
        }
        
        public void GetBeerCountriesAsync(object userState) {
            if ((this.onBeginGetBeerCountriesDelegate == null)) {
                this.onBeginGetBeerCountriesDelegate = new BeginOperationDelegate(this.OnBeginGetBeerCountries);
            }
            if ((this.onEndGetBeerCountriesDelegate == null)) {
                this.onEndGetBeerCountriesDelegate = new EndOperationDelegate(this.OnEndGetBeerCountries);
            }
            if ((this.onGetBeerCountriesCompletedDelegate == null)) {
                this.onGetBeerCountriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBeerCountriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetBeerCountriesDelegate, null, this.onEndGetBeerCountriesDelegate, this.onGetBeerCountriesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetContinentsWithBreweries(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContinentsWithBreweries(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetContinentsWithBreweries(System.IAsyncResult result) {
            return base.Channel.EndGetContinentsWithBreweries(result);
        }
        
        private System.IAsyncResult OnBeginGetContinentsWithBreweries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetContinentsWithBreweries(callback, asyncState);
        }
        
        private object[] OnEndGetContinentsWithBreweries(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetContinentsWithBreweries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContinentsWithBreweriesCompleted(object state) {
            if ((this.GetContinentsWithBreweriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContinentsWithBreweriesCompleted(this, new GetContinentsWithBreweriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContinentsWithBreweriesAsync() {
            this.GetContinentsWithBreweriesAsync(null);
        }
        
        public void GetContinentsWithBreweriesAsync(object userState) {
            if ((this.onBeginGetContinentsWithBreweriesDelegate == null)) {
                this.onBeginGetContinentsWithBreweriesDelegate = new BeginOperationDelegate(this.OnBeginGetContinentsWithBreweries);
            }
            if ((this.onEndGetContinentsWithBreweriesDelegate == null)) {
                this.onEndGetContinentsWithBreweriesDelegate = new EndOperationDelegate(this.OnEndGetContinentsWithBreweries);
            }
            if ((this.onGetContinentsWithBreweriesCompletedDelegate == null)) {
                this.onGetContinentsWithBreweriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContinentsWithBreweriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetContinentsWithBreweriesDelegate, null, this.onEndGetContinentsWithBreweriesDelegate, this.onGetContinentsWithBreweriesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetContinentCountriesWithBreweries(int continentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContinentCountriesWithBreweries(continentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetContinentCountriesWithBreweries(System.IAsyncResult result) {
            return base.Channel.EndGetContinentCountriesWithBreweries(result);
        }
        
        private System.IAsyncResult OnBeginGetContinentCountriesWithBreweries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int continentId = ((int)(inValues[0]));
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetContinentCountriesWithBreweries(continentId, callback, asyncState);
        }
        
        private object[] OnEndGetContinentCountriesWithBreweries(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetContinentCountriesWithBreweries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContinentCountriesWithBreweriesCompleted(object state) {
            if ((this.GetContinentCountriesWithBreweriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContinentCountriesWithBreweriesCompleted(this, new GetContinentCountriesWithBreweriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContinentCountriesWithBreweriesAsync(int continentId) {
            this.GetContinentCountriesWithBreweriesAsync(continentId, null);
        }
        
        public void GetContinentCountriesWithBreweriesAsync(int continentId, object userState) {
            if ((this.onBeginGetContinentCountriesWithBreweriesDelegate == null)) {
                this.onBeginGetContinentCountriesWithBreweriesDelegate = new BeginOperationDelegate(this.OnBeginGetContinentCountriesWithBreweries);
            }
            if ((this.onEndGetContinentCountriesWithBreweriesDelegate == null)) {
                this.onEndGetContinentCountriesWithBreweriesDelegate = new EndOperationDelegate(this.OnEndGetContinentCountriesWithBreweries);
            }
            if ((this.onGetContinentCountriesWithBreweriesCompletedDelegate == null)) {
                this.onGetContinentCountriesWithBreweriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContinentCountriesWithBreweriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetContinentCountriesWithBreweriesDelegate, new object[] {
                        continentId}, this.onEndGetContinentCountriesWithBreweriesDelegate, this.onGetContinentCountriesWithBreweriesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.BeginGetCountriesWithBreweries(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountriesWithBreweries(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService.EndGetCountriesWithBreweries(System.IAsyncResult result) {
            return base.Channel.EndGetCountriesWithBreweries(result);
        }
        
        private System.IAsyncResult OnBeginGetCountriesWithBreweries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).BeginGetCountriesWithBreweries(callback, asyncState);
        }
        
        private object[] OnEndGetCountriesWithBreweries(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> retVal = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService)(this)).EndGetCountriesWithBreweries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountriesWithBreweriesCompleted(object state) {
            if ((this.GetCountriesWithBreweriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountriesWithBreweriesCompleted(this, new GetCountriesWithBreweriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountriesWithBreweriesAsync() {
            this.GetCountriesWithBreweriesAsync(null);
        }
        
        public void GetCountriesWithBreweriesAsync(object userState) {
            if ((this.onBeginGetCountriesWithBreweriesDelegate == null)) {
                this.onBeginGetCountriesWithBreweriesDelegate = new BeginOperationDelegate(this.OnBeginGetCountriesWithBreweries);
            }
            if ((this.onEndGetCountriesWithBreweriesDelegate == null)) {
                this.onEndGetCountriesWithBreweriesDelegate = new EndOperationDelegate(this.OnEndGetCountriesWithBreweries);
            }
            if ((this.onGetCountriesWithBreweriesCompletedDelegate == null)) {
                this.onGetCountriesWithBreweriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountriesWithBreweriesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountriesWithBreweriesDelegate, null, this.onEndGetCountriesWithBreweriesDelegate, this.onGetCountriesWithBreweriesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService CreateChannel() {
            return new GeographyServiceClientChannel(this);
        }
        
        private class GeographyServiceClientChannel : ChannelBase<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService>, CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService {
            
            public GeographyServiceClientChannel(System.ServiceModel.ClientBase<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.IGeographyService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetContinents(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetContinents", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> EndGetContinents(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto>)(base.EndInvoke("GetContinents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllCountries(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllCountries", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> EndGetAllCountries(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto>)(base.EndInvoke("GetAllCountries", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountriesByContinent(int continentId, bool includeFlags, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = continentId;
                _args[1] = includeFlags;
                System.IAsyncResult _result = base.BeginInvoke("GetCountriesByContinent", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> EndGetCountriesByContinent(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto>)(base.EndInvoke("GetCountriesByContinent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountry(int countryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = countryId;
                System.IAsyncResult _result = base.BeginInvoke("GetCountry", _args, callback, asyncState);
                return _result;
            }
            
            public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto EndGetCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto _result = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto)(base.EndInvoke("GetCountry", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateCountry(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ImageFileOperationDto> flags, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = country;
                _args[1] = flags;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCountry", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCountry", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCountry(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto country, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = country;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCountry", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCountry", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllRegions(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllRegions", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> EndGetAllRegions(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto>)(base.EndInvoke("GetAllRegions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRegionsByCountry(int countryId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = countryId;
                System.IAsyncResult _result = base.BeginInvoke("GetRegionsByCountry", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> EndGetRegionsByCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto>)(base.EndInvoke("GetRegionsByCountry", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRegion(int regionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = regionId;
                System.IAsyncResult _result = base.BeginInvoke("GetRegion", _args, callback, asyncState);
                return _result;
            }
            
            public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto EndGetRegion(System.IAsyncResult result) {
                object[] _args = new object[0];
                CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto _result = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto)(base.EndInvoke("GetRegion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateRegion(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = region;
                System.IAsyncResult _result = base.BeginInvoke("UpdateRegion", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateRegion(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateRegion", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteRegion(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.RegionDto region, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = region;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRegion", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteRegion(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteRegion", _args, result);
            }
            
            public System.IAsyncResult BeginGetAlCities(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAlCities", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> EndGetAlCities(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto>)(base.EndInvoke("GetAlCities", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCitiesByRegion(int regionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = regionId;
                System.IAsyncResult _result = base.BeginInvoke("GetCitiesByRegion", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> EndGetCitiesByRegion(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto>)(base.EndInvoke("GetCitiesByRegion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCity(int cityId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cityId;
                System.IAsyncResult _result = base.BeginInvoke("GetCity", _args, callback, asyncState);
                return _result;
            }
            
            public CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto EndGetCity(System.IAsyncResult result) {
                object[] _args = new object[0];
                CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto _result = ((CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto)(base.EndInvoke("GetCity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateCity(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = city;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCity", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCity(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCity", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCity(CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CityDto city, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = city;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCity", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCity(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCity", _args, result);
            }
            
            public System.IAsyncResult BeginGetBeerCountries(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetBeerCountries", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.BeerCountryDto> EndGetBeerCountries(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.BeerCountryDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.BeerCountryDto>)(base.EndInvoke("GetBeerCountries", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetContinentsWithBreweries(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetContinentsWithBreweries", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> EndGetContinentsWithBreweries(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.ContinentDto>)(base.EndInvoke("GetContinentsWithBreweries", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetContinentCountriesWithBreweries(int continentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = continentId;
                System.IAsyncResult _result = base.BeginInvoke("GetContinentCountriesWithBreweries", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> EndGetContinentCountriesWithBreweries(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto>)(base.EndInvoke("GetContinentCountriesWithBreweries", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountriesWithBreweries(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCountriesWithBreweries", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> EndGetCountriesWithBreweries(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto> _result = ((System.Collections.ObjectModel.ObservableCollection<CapsCollection.Silverlight.ServiceAgents.Proxies.Geography.CountryDto>)(base.EndInvoke("GetCountriesWithBreweries", _args, result)));
                return _result;
            }
        }
    }
}
